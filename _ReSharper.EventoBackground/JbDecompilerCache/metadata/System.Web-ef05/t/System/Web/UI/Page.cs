// Type: System.Web.UI.Page
// Assembly: System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// Assembly location: C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Web.dll

using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.ComponentModel.Design.Serialization;
using System.IO;
using System.Runtime;
using System.Security.Principal;
using System.Web;
using System.Web.Caching;
using System.Web.Routing;
using System.Web.SessionState;
using System.Web.UI.Adapters;
using System.Web.UI.HtmlControls;

namespace System.Web.UI
{
    /// <summary>
    /// Represents an .aspx file, also known as a Web Forms page, requested from a server that hosts an ASP.NET Web application.
    /// </summary>
    [DesignerSerializer("Microsoft.VisualStudio.Web.WebForms.WebFormCodeDomSerializer, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.TypeCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [Designer("Microsoft.VisualStudio.Web.WebForms.WebFormDesigner, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof (IRootDesigner))]
    [ToolboxItem(false)]
    [DefaultEvent("Load")]
    [DesignerCategory("ASPXCodeBehind")]
    public class Page : TemplateControl, IHttpHandler
    {
        /// <summary>
        /// A string that defines the EVENTTARGET hidden field in the rendered page.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)] public const string postEventSourceID = "__EVENTTARGET";

        /// <summary>
        /// A string that defines the EVENTARGUMENT hidden field in the rendered page.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)] public const string postEventArgumentID = "__EVENTARGUMENT";

        /// <summary>
        /// Initializes a new instance of the <see cref="T:System.Web.UI.Page"/> class.
        /// </summary>
        public Page();

        /// <summary>
        /// Creates an <see cref="T:System.Web.UI.HtmlTextWriter"/> object to render the page's content.
        /// </summary>
        /// 
        /// <returns>
        /// An <see cref="T:System.Web.UI.HtmlTextWriter"/> or <see cref="T:System.Web.UI.Html32TextWriter"/>.
        /// </returns>
        /// <param name="tw">The <see cref="T:System.IO.TextWriter"/> used to create the <see cref="T:System.Web.UI.HtmlTextWriter"/>.</param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected internal virtual HtmlTextWriter CreateHtmlTextWriter(TextWriter tw);

        /// <summary>
        /// Creates a specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object to render the page's content.
        /// </summary>
        /// 
        /// <returns>
        /// An <see cref="T:System.Web.UI.HtmlTextWriter"/> that renders the content of the page.
        /// </returns>
        /// <param name="tw">The <see cref="T:System.IO.TextWriter"/> used to create the <see cref="T:System.Web.UI.HtmlTextWriter"/>. </param><param name="writerType">The type of text writer to create.</param><exception cref="T:System.Web.HttpException">The <paramref name="writerType"/> parameter is set to an invalid type.</exception>
        public static HtmlTextWriter CreateHtmlTextWriterFromType(TextWriter tw, Type writerType);

        /// <summary>
        /// Searches the page naming container for a server control with the specified identifier.
        /// </summary>
        /// 
        /// <returns>
        /// The specified control, or null if the specified control does not exist.
        /// </returns>
        /// <param name="id">The identifier for the control to be found. </param>
        public override Control FindControl(string id);

        /// <summary>
        /// Retrieves a hash code that is generated by <see cref="T:System.Web.UI.Page"/> objects that are generated at run time. This hash code is unique to the <see cref="T:System.Web.UI.Page"/> object's control hierarchy.
        /// </summary>
        /// 
        /// <returns>
        /// The hash code generated at run time. The default is 0.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual int GetTypeHashCode();

        /// <summary>
        /// Performs any initialization of the instance of the <see cref="T:System.Web.UI.Page"/> class that is required by RAD designers. This method is used only at design time.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void DesignerInitialize();

        /// <summary>
        /// Returns a <see cref="T:System.Collections.Specialized.NameValueCollection"/> of data posted back to the page using either a POST or a GET command.
        /// </summary>
        /// 
        /// <returns>
        /// A <see cref="T:System.Collections.Specialized.NameValueCollection"/> object that contains the form data. If the postback used the POST command, the form information is returned from the <see cref="P:System.Web.UI.Page.Context"/> object. If the postback used the GET command, the query string information is returned. If the page is being requested for the first time, null is returned.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected internal virtual NameValueCollection DeterminePostBackMode();

        /// <summary>
        /// Loads any saved view-state information to the <see cref="T:System.Web.UI.Page"/> object.
        /// </summary>
        /// 
        /// <returns>
        /// The saved view state.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected internal virtual object LoadPageStateFromPersistenceMedium();

        /// <summary>
        /// Sets the browser focus to the specified control.
        /// </summary>
        /// <param name="control">The control to receive focus.</param><exception cref="T:System.ArgumentNullException"><paramref name="control"/> is null. </exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)"/> is called when the control is not part of a Web Forms page. - or -<see cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)"/> is called after the <see cref="E:System.Web.UI.Control.PreRender"/> event. </exception>
        public void SetFocus(Control control);

        /// <summary>
        /// Sets the browser focus to the control with the specified identifier.
        /// </summary>
        /// <param name="clientID">The ID of the control to set focus to.</param><exception cref="T:System.ArgumentNullException"><paramref name="clientID"/> is null.</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.Page.SetFocus(System.String)"/> is called when the control is not part of a Web Forms page.- or -<see cref="M:System.Web.UI.Page.SetFocus(System.String)"/> is called after the <see cref="E:System.Web.UI.Control.PreRender"/> event.</exception>
        public void SetFocus(string clientID);

        /// <summary>
        /// Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <see cref="T:System.Web.UI.Control"/> object.
        /// </summary>
        /// 
        /// <returns>
        /// A string that, when treated as script on the client, initiates the postback.
        /// </returns>
        /// <param name="control">The server control to process the postback on the server. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Obsolete("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")]
        public string GetPostBackEventReference(Control control);

        /// <summary>
        /// Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.
        /// </summary>
        /// 
        /// <returns>
        /// A string that, when treated as script on the client, initiates the postback.
        /// </returns>
        /// <param name="control">The server control to process the postback. </param><param name="argument">The parameter passed to the server control. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Obsolete("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")]
        public string GetPostBackEventReference(Control control, string argument);

        /// <summary>
        /// Gets a reference that can be used in a client event to post back to the server for the specified control and with the specified event arguments.
        /// </summary>
        /// 
        /// <returns>
        /// The string that represents the client event.
        /// </returns>
        /// <param name="control">The server control that receives the client event postback. </param><param name="argument">A <see cref="T:System.String"/> that is passed to <see cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)"/>. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Obsolete("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")]
        public string GetPostBackClientEvent(Control control, string argument);

        /// <summary>
        /// Gets a reference, with javascript: appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.
        /// </summary>
        /// 
        /// <returns>
        /// A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.
        /// </returns>
        /// <param name="control">The server control to process the postback. </param><param name="argument">The parameter passed to the server control. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Obsolete("The recommended alternative is ClientScript.GetPostBackClientHyperlink. http://go.microsoft.com/fwlink/?linkid=14202")]
        public string GetPostBackClientHyperlink(Control control, string argument);

        /// <summary>
        /// Called during page initialization to create a collection of content (from content controls) that is handed to a master page, if the current page or master page refers to a master page.
        /// </summary>
        /// <param name="templateName">The name of the content template to add.</param><param name="template">The content template</param><exception cref="T:System.Web.HttpException">A content template with the same name already exists.</exception>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal void AddContentTemplate(string templateName, ITemplate template);

        /// <summary>
        /// Determines whether the client script block with the specified key is registered with the page.
        /// </summary>
        /// 
        /// <returns>
        /// true if the script block is registered; otherwise, false.
        /// </returns>
        /// <param name="key">The string key of the client script to search for. </param>
        [Obsolete("The recommended alternative is ClientScript.IsClientScriptBlockRegistered(string key). http://go.microsoft.com/fwlink/?linkid=14202")]
        public bool IsClientScriptBlockRegistered(string key);

        /// <summary>
        /// Determines whether the client startup script is registered with the <see cref="T:System.Web.UI.Page"/> object.
        /// </summary>
        /// 
        /// <returns>
        /// true if the startup script is registered; otherwise, false.
        /// </returns>
        /// <param name="key">The string key of the startup script to search for. </param>
        [Obsolete("The recommended alternative is ClientScript.IsStartupScriptRegistered(string key). http://go.microsoft.com/fwlink/?linkid=14202")]
        public bool IsStartupScriptRegistered(string key);

        /// <summary>
        /// Declares a value that is declared as an ECMAScript array declaration when the page is rendered.
        /// </summary>
        /// <param name="arrayName">The name of the array in which to declare the value. </param><param name="arrayValue">The value to place in the array. </param>
        [Obsolete("The recommended alternative is ClientScript.RegisterArrayDeclaration(string arrayName, string arrayValue). http://go.microsoft.com/fwlink/?linkid=14202")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public void RegisterArrayDeclaration(string arrayName, string arrayValue);

        /// <summary>
        /// Allows server controls to automatically register a hidden field on the form. The field will be sent to the <see cref="T:System.Web.UI.Page"/> object when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm"/> server control is rendered.
        /// </summary>
        /// <param name="hiddenFieldName">The unique name of the hidden field to be rendered. </param><param name="hiddenFieldInitialValue">The value to be emitted in the hidden form. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Obsolete("The recommended alternative is ClientScript.RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue). http://go.microsoft.com/fwlink/?linkid=14202")]
        public virtual void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue);

        /// <summary>
        /// Emits client-side script blocks to the response.
        /// </summary>
        /// <param name="key">Unique key that identifies a script block. </param><param name="script">Content of script that is sent to the client. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Obsolete("The recommended alternative is ClientScript.RegisterClientScriptBlock(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")]
        public virtual void RegisterClientScriptBlock(string key, string script);

        /// <summary>
        /// Emits a client-side script block in the page response.
        /// </summary>
        /// <param name="key">Unique key that identifies a script block. </param><param name="script">Content of script that will be sent to the client. </param>
        [Obsolete("The recommended alternative is ClientScript.RegisterStartupScript(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public virtual void RegisterStartupScript(string key, string script);

        /// <summary>
        /// Allows a page to access the client OnSubmit event. The script should be a function call to client code registered elsewhere.
        /// </summary>
        /// <param name="key">Unique key that identifies a script block. </param><param name="script">The client-side script to be sent to the client. </param>
        [Obsolete("The recommended alternative is ClientScript.RegisterOnSubmitStatement(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public void RegisterOnSubmitStatement(string key, string script);

        /// <summary>
        /// Registers a control as one whose control state must be persisted.
        /// </summary>
        /// <param name="control">The control to register.</param><exception cref="T:System.ArgumentException">The control to register is null.</exception><exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.UI.Page.RegisterRequiresControlState(System.Web.UI.Control)"/> method can be called only before or during the <see cref="E:System.Web.UI.Control.PreRender"/> event.</exception>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public void RegisterRequiresControlState(Control control);

        /// <summary>
        /// Determines whether the specified <see cref="T:System.Web.UI.Control"/> object is registered to participate in control state management.
        /// </summary>
        /// 
        /// <returns>
        /// true if the specified <see cref="T:System.Web.UI.Control"/> requires control state; otherwise, false
        /// </returns>
        /// <param name="control">The <see cref="T:System.Web.UI.Control"/> to check for a control state requirement.</param>
        public bool RequiresControlState(Control control);

        /// <summary>
        /// Stops persistence of control state for the specified control.
        /// </summary>
        /// <param name="control">The <see cref="T:System.Web.UI.Control"/> for which to stop persistence of control state.</param><exception cref="T:System.ArgumentException">The <see cref="T:System.Web.UI.Control"/> is null.</exception>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public void UnregisterRequiresControlState(Control control);

        /// <summary>
        /// Registers a control as one that requires postback handling when the page is posted back to the server.
        /// </summary>
        /// <param name="control">The control to be registered. </param><exception cref="T:System.Web.HttpException">The control to register does not implement the <see cref="T:System.Web.UI.IPostBackDataHandler"/> interface. </exception>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public void RegisterRequiresPostBack(Control control);

        /// <summary>
        /// Notifies the server control that caused the postback that it should handle an incoming postback event.
        /// </summary>
        /// <param name="sourceControl">The ASP.NET server control that caused the postback. This control must implement the <see cref="T:System.Web.UI.IPostBackEventHandler"/> interface. </param><param name="eventArgument">The postback argument. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected virtual void RaisePostBackEvent(IPostBackEventHandler sourceControl, string eventArgument);

        /// <summary>
        /// Registers an ASP.NET server control as one requiring an event to be raised when the control is processed on the <see cref="T:System.Web.UI.Page"/> object.
        /// </summary>
        /// <param name="control">The control to register. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public virtual void RegisterRequiresRaiseEvent(IPostBackEventHandler control);

        /// <summary>
        /// Retrieves the physical path that a virtual path, either absolute or relative, or an application-relative path maps to.
        /// </summary>
        /// 
        /// <returns>
        /// The physical path associated with the virtual path or application-relative path.
        /// </returns>
        /// <param name="virtualPath">A <see cref="T:System.String"/> that represents the virtual path. </param>
        public string MapPath(string virtualPath);

        /// <summary>
        /// Initializes the output cache for the current page request.
        /// </summary>
        /// <param name="duration">The amount of time that objects stored in the output cache are valid. </param><param name="varyByHeader">A semicolon-separated list of headers that content from the output cache will vary by. </param><param name="varyByCustom">The Vary HTTP header. </param><param name="location">One of the <see cref="T:System.Web.UI.OutputCacheLocation"/> values. </param><param name="varyByParam">A semicolon-separated list of parameters received by a GET or POST method that content from the output cache will vary by.</param><exception cref="T:System.ArgumentOutOfRangeException">An invalid value is specified for <paramref name="location"/>. </exception>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected virtual void InitOutputCache(int duration, string varyByHeader, string varyByCustom, OutputCacheLocation location, string varyByParam);

        /// <summary>
        /// Initializes the output cache for the current page request.
        /// </summary>
        /// <param name="duration">The amount of time that objects stored in the output cache are valid.</param><param name="varyByContentEncoding">A semicolon-separated list of character-sets (content encodings) that content from the output cache will vary by.</param><param name="varyByHeader">A semicolon-separated list of headers that content from the output cache will vary by.</param><param name="varyByCustom">The Vary HTTP header.</param><param name="location">One of the <see cref="T:System.Web.UI.OutputCacheLocation"/> values.</param><param name="varyByParam">A semicolon-separated list of parameters received by a GET or POST method that content from the output cache will vary by.</param><exception cref="T:System.ArgumentOutOfRangeException">An invalid value is specified for <paramref name="location"/>. </exception>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected virtual void InitOutputCache(int duration, string varyByContentEncoding, string varyByHeader, string varyByCustom, OutputCacheLocation location, string varyByParam);

        /// <summary>
        /// Initializes the output cache for the current page request based on an <see cref="T:System.Web.UI.OutputCacheParameters"/> object.
        /// </summary>
        /// <param name="cacheSettings">An <see cref="T:System.Web.UI.OutputCacheParameters"/> that contains the cache settings.</param><exception cref="T:System.Web.HttpException">The cache profile was not found.- or -A missing directive or configuration settings profile attribute.</exception><exception cref="T:System.ArgumentOutOfRangeException">The output cache settings location is invalid. </exception>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal virtual void InitOutputCache(OutputCacheParameters cacheSettings);

        /// <summary>
        /// Returns a list of physical file names that correspond to a list of virtual file locations.
        /// </summary>
        /// 
        /// <returns>
        /// An object containing a list of physical file locations.
        /// </returns>
        /// <param name="virtualFileDependencies">A string array of virtual file locations.</param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected object GetWrappedFileDependencies(string[] virtualFileDependencies);

        /// <summary>
        /// Adds a list of dependent files that make up the current page. This method is used internally by the ASP.NET page framework and is not intended to be used directly from your code.
        /// </summary>
        /// <param name="virtualFileDependencies">An <see cref="T:System.Object"/> containing the list of file names.</param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal void AddWrappedFileDependencies(object virtualFileDependencies);

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Page.LoadComplete"/> event at the end of the page load stage.
        /// </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        protected virtual void OnLoadComplete(EventArgs e);

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Page.PreRenderComplete"/> event after the <see cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)"/> event and before the page is rendered.
        /// </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        protected virtual void OnPreRenderComplete(EventArgs e);

        /// <summary>
        /// Initializes the control tree during page generation based on the declarative nature of the page.
        /// </summary>
        protected override void FrameworkInitialize();

        /// <summary>
        /// Sets the <see cref="P:System.Web.UI.Page.Culture"/> and <see cref="P:System.Web.UI.Page.UICulture"/> for the current thread of the page.
        /// </summary>
        protected virtual void InitializeCulture();

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Control.Init"/> event to initialize the page.
        /// </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        protected internal override void OnInit(EventArgs e);

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Page.PreInit"/> event at the beginning of page initialization.
        /// </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        protected virtual void OnPreInit(EventArgs e);

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Page.InitComplete"/> event after page initialization.
        /// </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        protected virtual void OnInitComplete(EventArgs e);

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Page.PreLoad"/> event after postback data is loaded into the page server controls but before the <see cref="M:System.Web.UI.Control.OnLoad(System.EventArgs)"/> event.
        /// </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        protected virtual void OnPreLoad(EventArgs e);

        /// <summary>
        /// Registers a control with the page as one requiring view-state encryption.
        /// </summary>
        /// <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.UI.Page.RegisterRequiresViewStateEncryption"/> method must be called before or during the page PreRenderphase in the page life cycle. </exception>
        public void RegisterRequiresViewStateEncryption();

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Page.SaveStateComplete"/> event after the page state has been saved to the persistence medium.
        /// </summary>
        /// <param name="e">A <see cref="T:System.EventArgs"/> object containing the event data.</param>
        protected virtual void OnSaveStateComplete(EventArgs e);

        /// <summary>
        /// Sets the intrinsic server objects of the <see cref="T:System.Web.UI.Page"/> object, such as the <see cref="P:System.Web.UI.Page.Context"/>, <see cref="P:System.Web.UI.Page.Request"/>, <see cref="P:System.Web.UI.Page.Response"/>, and <see cref="P:System.Web.UI.Page.Application"/> properties.
        /// </summary>
        /// <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, <see cref="P:System.Web.HttpContext.Request"/>, <see cref="P:System.Web.HttpContext.Response"/>, and <see cref="P:System.Web.HttpContext.Session"/>) used to service HTTP requests. </param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public virtual void ProcessRequest(HttpContext context);

        /// <summary>
        /// Initializes the <see cref="T:System.Web.UI.HtmlTextWriter"/> object and calls on the child controls of the <see cref="T:System.Web.UI.Page"/> to render.
        /// </summary>
        /// <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the page content.</param>
        protected internal override void Render(HtmlTextWriter writer);

        /// <summary>
        /// Causes page view state to be persisted, if called.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public void RegisterViewStateHandler();

        /// <summary>
        /// Saves any view-state and control-state information for the page.
        /// </summary>
        /// <param name="state"/>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected internal virtual void SavePageStateToPersistenceMedium(object state);

        /// <summary>
        /// Initiates a request for Active Server Page (ASP) resources. This method is provided for compatibility with legacy ASP applications.
        /// </summary>
        /// 
        /// <returns>
        /// An <see cref="T:System.IAsyncResult"/> object.
        /// </returns>
        /// <param name="context">An <see cref="T:System.Web.HttpContext"/> with information about the current request. </param><param name="cb">The callback method. </param><param name="extraData">Any extra data needed to process the request in the same manner as an ASP request. </param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected IAsyncResult AspCompatBeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);

        /// <summary>
        /// Terminates a request for Active Server Page (ASP) resources. This method is provided for compatibility with legacy ASP applications.
        /// </summary>
        /// <param name="result">The ASP page generated by the request. </param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected void AspCompatEndProcessRequest(IAsyncResult result);

        /// <summary>
        /// Starts the execution of an asynchronous task.
        /// </summary>
        /// <exception cref="T:System.Web.HttpException">There is an exception in the asynchronous task.</exception>
        public void ExecuteRegisteredAsyncTasks();

        /// <summary>
        /// Registers a new asynchronous task with the page.
        /// </summary>
        /// <param name="task">A <see cref="T:System.Web.UI.PageAsyncTask"/> that defines the asynchronous task.</param><exception cref="T:System.ArgumentNullException">The asynchronous task is null. </exception>
        public void RegisterAsyncTask(PageAsyncTask task);

        /// <summary>
        /// Begins processing an asynchronous page request.
        /// </summary>
        /// 
        /// <returns>
        /// An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.
        /// </returns>
        /// <param name="context">The <see cref="T:System.Web.HttpContext"/> for the request.</param><param name="callback">The callback method to notify when the process is complete.</param><param name="extraData">State data for the asynchronous method.</param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected IAsyncResult AsyncPageBeginProcessRequest(HttpContext context, AsyncCallback callback, object extraData);

        /// <summary>
        /// Ends processing an asynchronous page request.
        /// </summary>
        /// <param name="result">An <see cref="T:System.IAsyncResult"/> referencing a pending asynchronous request.</param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected void AsyncPageEndProcessRequest(IAsyncResult result);

        /// <summary>
        /// Registers beginning and ending event handler delegates that do not require state information for an asynchronous page.
        /// </summary>
        /// <param name="beginHandler">The delegate for the <see cref="T:System.Web.BeginEventHandler"/> method.</param><param name="endHandler">The delegate for the <see cref="T:System.Web.EndEventHandler"/> method.</param><exception cref="T:System.InvalidOperationException">The &lt;async&gt; page directive is not set to true.- or -The <see cref="M:System.Web.UI.Page.AddOnPreRenderCompleteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)"/> method is called after the <see cref="E:System.Web.UI.Control.PreRender"/> event.</exception><exception cref="T:System.ArgumentNullException">The <see cref="P:System.Web.UI.PageAsyncTask.BeginHandler"/> or <see cref="P:System.Web.UI.PageAsyncTask.EndHandler"/> is null. </exception>
        public void AddOnPreRenderCompleteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler);

        /// <summary>
        /// Registers beginning and ending  event handler delegates for an asynchronous page.
        /// </summary>
        /// <param name="beginHandler">The delegate for the <see cref="T:System.Web.BeginEventHandler"/> method.</param><param name="endHandler">The delegate for the <see cref="T:System.Web.EndEventHandler"/> method.</param><param name="state">An object containing state information for the event handlers.</param><exception cref="T:System.InvalidOperationException">The &lt;async&gt; page directive is not set to true.- or -The <see cref="M:System.Web.UI.Page.AddOnPreRenderCompleteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)"/> method is called after the <see cref="E:System.Web.UI.Control.PreRender"/> event.</exception><exception cref="T:System.ArgumentNullException">The <see cref="P:System.Web.UI.PageAsyncTask.BeginHandler"/> or <see cref="P:System.Web.UI.PageAsyncTask.EndHandler"/> is null. </exception>
        public void AddOnPreRenderCompleteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);

        /// <summary>
        /// Instructs any validation controls included on the page to validate their assigned information.
        /// </summary>
        public virtual void Validate();

        /// <summary>
        /// Instructs the validation controls in the specified validation group to validate their assigned information.
        /// </summary>
        /// <param name="validationGroup">The validation group name of the controls to validate.</param>
        public virtual void Validate(string validationGroup);

        /// <summary>
        /// Returns a collection of control validators for a specified validation group.
        /// </summary>
        /// 
        /// <returns>
        /// A <see cref="T:System.Web.UI.ValidatorCollection"/> that contains the control validators for the specified validation group.
        /// </returns>
        /// <param name="validationGroup">The validation group to return, or null to return the default validation group.</param>
        public ValidatorCollection GetValidators(string validationGroup);

        /// <summary>
        /// Confirms that an <see cref="T:System.Web.UI.HtmlControls.HtmlForm"/> control is rendered for the specified ASP.NET server control at run time.
        /// </summary>
        /// <param name="control">The ASP.NET server control that is required in the <see cref="T:System.Web.UI.HtmlControls.HtmlForm"/> control. </param><exception cref="T:System.Web.HttpException">The specified server control is not contained between the opening and closing tags of the <see cref="T:System.Web.UI.HtmlControls.HtmlForm"/> server control at run time. </exception><exception cref="T:System.ArgumentNullException">The control to verify is null.</exception>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public virtual void VerifyRenderingInServerForm(Control control);

        /// <summary>
        /// Gets the data item at the top of the data-binding context stack.
        /// </summary>
        /// 
        /// <returns>
        /// The object at the top of the data binding context stack.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">There is no data-binding context for the page.</exception>
        public object GetDataItem();

        /// <summary>
        /// Gets the <see cref="T:System.Web.HttpApplicationState"/> object for the current Web request.
        /// </summary>
        /// 
        /// <returns>
        /// The current data in the <see cref="T:System.Web.HttpApplicationState"/> class.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public HttpApplicationState Application { get; }

        /// <summary>
        /// Gets the <see cref="T:System.Web.HttpContext"/> object associated with the page.
        /// </summary>
        /// 
        /// <returns>
        /// An <see cref="T:System.Web.HttpContext"/> object that contains information associated with the current page.
        /// </returns>
        protected internal override HttpContext Context { [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        get; }

        /// <summary>
        /// Gets a <see cref="T:System.Web.UI.ClientScriptManager"/> object used to manage, register, and add script to the page.
        /// </summary>
        /// 
        /// <returns>
        /// A <see cref="T:System.Web.UI.ClientScriptManager"/> object.
        /// </returns>
        public ClientScriptManager ClientScript { get; }

        /// <summary>
        /// Gets or sets a value that allows you to override automatic detection of browser capabilities and to specify how a page is rendered for particular browser clients.
        /// </summary>
        /// 
        /// <returns>
        /// A <see cref="T:System.String"/> that specifies the browser capabilities that you want to override.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Browsable(false)]
        [DefaultValue("")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [WebSysDescription("Page_ClientTarget")]
        public string ClientTarget { get; set; }

        /// <summary>
        /// Gets the query string portion of the requested URL.
        /// </summary>
        /// 
        /// <returns>
        /// The query string portion of the requested URL.
        /// </returns>
        public string ClientQueryString { get; }

        /// <summary>
        /// Gets or sets the error page to which the requesting browser is redirected in the event of an unhandled page exception.
        /// </summary>
        /// 
        /// <returns>
        /// The error page to which the browser is redirected.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [WebSysDescription("Page_ErrorPage")]
        [DefaultValue("")]
        [Browsable(false)]
        public string ErrorPage { get; set; }

        /// <summary>
        /// Gets a value that indicates whether the page request is the result of a callback.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page request is the result of a callback; otherwise, false.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public bool IsCallback { get; }

        /// <summary>
        /// Gets a value indicating whether the <see cref="T:System.Web.UI.Page"/> object can be reused.
        /// </summary>
        /// 
        /// <returns>
        /// false in all cases.
        /// </returns>
        [Browsable(false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public bool IsReusable { get; }

        /// <summary>
        /// Gets a unique suffix to append to the file path for caching browsers.
        /// </summary>
        /// 
        /// <returns>
        /// A unique suffix appended to the file path. The default is "__ufps=" plus a unique 6-digit number.
        /// </returns>
        protected internal virtual string UniqueFilePathSuffix { get; }

        /// <summary>
        /// Gets or sets the control in the page that is used to perform postbacks.
        /// </summary>
        /// 
        /// <returns>
        /// The control that is used to perform postbacks.
        /// </returns>
        public Control AutoPostBackControl { get; set; }

        /// <summary>
        /// Gets the document header for the page if the head element is defined with a runat=server in the page declaration.
        /// </summary>
        /// 
        /// <returns>
        /// An <see cref="T:System.Web.UI.HtmlControls.HtmlHead"/> containing the page header.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public HtmlHead Header { get; }

        /// <summary>
        /// Gets the character used to separate control identifiers when building a unique ID for a control on a page.
        /// </summary>
        /// 
        /// <returns>
        /// The character used to separate control identifiers. The default is set by the <see cref="T:System.Web.UI.Adapters.PageAdapter"/> instance that renders the page. The <see cref="P:System.Web.UI.Page.IdSeparator"/> is a server-side field and should not be modified.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public new virtual char IdSeparator { get; }

        /// <summary>
        /// Gets or sets a value indicating whether to return the user to the same position in the client browser after postback. This property replaces the obsolete <see cref="P:System.Web.UI.Page.SmartNavigation"/> property.
        /// </summary>
        /// 
        /// <returns>
        /// true if the client position should be maintained; otherwise, false.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public bool MaintainScrollPositionOnPostBack { get; set; }

        /// <summary>
        /// Gets the master page that determines the overall look of the page.
        /// </summary>
        /// 
        /// <returns>
        /// The <see cref="T:System.Web.UI.MasterPage"/> associated with this page if it exists; otherwise, null.
        /// </returns>
        [WebSysDescription("MasterPage_MasterPage")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public MasterPage Master { get; }

        /// <summary>
        /// Gets or sets the file name of the master page.
        /// </summary>
        /// 
        /// <returns>
        /// The file name of the master page.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.UI.Page.MasterPageFile"/> property is set after the <see cref="E:System.Web.UI.Page.PreInit"/> event is complete.</exception><exception cref="T:System.Web.HttpException">The file specified in the <see cref="P:System.Web.UI.Page.MasterPageFile"/> property does not exist.- or -The page does not have a <see cref="T:System.Web.UI.WebControls.Content"/> control as the top level control.</exception>
        [WebSysDescription("MasterPage_MasterPageFile")]
        [WebCategory("Behavior")]
        [DefaultValue("")]
        public virtual string MasterPageFile { get; set; }

        /// <summary>
        /// Gets or sets the maximum length for the page's state field.
        /// </summary>
        /// 
        /// <returns>
        /// The maximum length, in bytes, for the page's state field. The default is -1.
        /// </returns>
        /// <exception cref="T:System.ArgumentException">The <see cref="P:System.Web.UI.Page.MaxPageStateFieldLength"/> property is not equal to -1 or a positive number.</exception><exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.UI.Page.MaxPageStateFieldLength"/> property was set after the page was initialized.</exception>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public int MaxPageStateFieldLength { get; set; }

        /// <summary>
        /// Gets the <see cref="T:System.Web.UI.PageStatePersister"/> object associated with the page.
        /// </summary>
        /// 
        /// <returns>
        /// A <see cref="T:System.Web.UI.PageStatePersister"/> associated with the page.
        /// </returns>
        protected virtual PageStatePersister PageStatePersister { get; }

        /// <summary>
        /// Gets the <see cref="T:System.Web.TraceContext"/> object for the current Web request.
        /// </summary>
        /// 
        /// <returns>
        /// Data from the <see cref="T:System.Web.TraceContext"/> object for the current Web request.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public TraceContext Trace { get; }

        /// <summary>
        /// Gets the <see cref="T:System.Web.HttpRequest"/> object for the requested page.
        /// </summary>
        /// 
        /// <returns>
        /// The current <see cref="T:System.Web.HttpRequest"/> associated with the page.
        /// </returns>
        /// <exception cref="T:System.Web.HttpException">Occurs when the <see cref="T:System.Web.HttpRequest"/> object is not available. </exception>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public HttpRequest Request { [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        get; }

        /// <summary>
        /// Gets the <see cref="T:System.Web.HttpResponse"/> object associated with the <see cref="T:System.Web.UI.Page"/> object. This object allows you to send HTTP response data to a client and contains information about that response.
        /// </summary>
        /// 
        /// <returns>
        /// The current <see cref="T:System.Web.HttpResponse"/> associated with the page.
        /// </returns>
        /// <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.HttpResponse"/> object is not available. </exception>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public HttpResponse Response { get; }

        /// <summary>
        /// Gets the <see cref="P:System.Web.Routing.RequestContext.RouteData"/> value of the current <see cref="T:System.Web.Routing.RequestContext"/> instance.
        /// </summary>
        /// 
        /// <returns>
        /// The <see cref="P:System.Web.Routing.RequestContext.RouteData"/> value of the current <see cref="T:System.Web.Routing.RequestContext"/> instance.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public RouteData RouteData { get; }

        /// <summary>
        /// Gets the Server object, which is an instance of the <see cref="T:System.Web.HttpServerUtility"/> class.
        /// </summary>
        /// 
        /// <returns>
        /// The current Server object associated with the page.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public HttpServerUtility Server { get; }

        /// <summary>
        /// Gets the <see cref="T:System.Web.Caching.Cache"/> object associated with the application in which the page resides.
        /// </summary>
        /// 
        /// <returns>
        /// The <see cref="T:System.Web.Caching.Cache"/> associated with the page's application.
        /// </returns>
        /// <exception cref="T:System.Web.HttpException">An instance of <see cref="T:System.Web.Caching.Cache"/> is not created. </exception>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public Cache Cache { get; }

        /// <summary>
        /// Gets the current Session object provided by ASP.NET.
        /// </summary>
        /// 
        /// <returns>
        /// The current session-state data.
        /// </returns>
        /// <exception cref="T:System.Web.HttpException">Occurs when the session information is set to null. </exception>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual HttpSessionState Session { get; }

        /// <summary>
        /// Gets or sets the title for the page.
        /// </summary>
        /// 
        /// <returns>
        /// The title of the page.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.UI.Page.Title"/> property requires a header control on the page.</exception>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Bindable(true)]
        [Localizable(true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the content of the "description" meta element.
        /// </summary>
        /// 
        /// <returns>
        /// The content of the "description" meta element.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">The page does not have a header control (a head element with the runat attribute set to "server"). </exception>
        [Bindable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Localizable(true)]
        public string MetaDescription { get; set; }

        /// <summary>
        /// Gets or sets the content of the "keywords" meta element.
        /// </summary>
        /// 
        /// <returns>
        /// The content of the "keywords" meta element.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">The page does not have a header control (a head element with the runat attribute set to "server"). </exception>
        [Localizable(true)]
        [Bindable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string MetaKeywords { get; set; }

        /// <summary>
        /// Gets or sets the name of the page theme.
        /// </summary>
        /// 
        /// <returns>
        /// The name of the page theme.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">An attempt was made to set <see cref="P:System.Web.UI.Page.Theme"/> after the <see cref="E:System.Web.UI.Page.PreInit"/> event has occurred.</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Web.UI.Page.Theme"/> is set to an invalid theme name.</exception>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public virtual string Theme { get; set; }

        /// <summary>
        /// Gets or sets the name of the style sheet applied to this page.
        /// </summary>
        /// 
        /// <returns>
        /// The name of the style sheet applied to this page.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.UI.Page.StyleSheetTheme"/> property is set before the <see cref="E:System.Web.UI.Control.Init"/> event completes.</exception>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Filterable(false)]
        public virtual string StyleSheetTheme { get; set; }

        /// <summary>
        /// Gets information about the user making the page request.
        /// </summary>
        /// 
        /// <returns>
        /// An <see cref="T:System.Security.Principal.IPrincipal"/> that represents the user making the page request.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IPrincipal User { get; }

        /// <summary>
        /// Gets a value indicating whether the page is involved in a cross-page postback.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page is participating in a cross-page request; otherwise, false.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public bool IsCrossPagePostBack { get; }

        /// <summary>
        /// Gets a value that indicates whether the page is being rendered for the first time or is being loaded in response to a postback.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page is being loaded in response to a client postback; otherwise, false.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public bool IsPostBack { get; }

        /// <summary>
        /// Gets or sets a value indicating whether the page validates postback and callback events.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page validates events; otherwise, false.The default is true.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.UI.Page.EnableEventValidation"/> property was set after the page was initialized.</exception>
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Browsable(false)]
        [DefaultValue(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual bool EnableEventValidation { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the page maintains its view state, and the view state of any server controls it contains, when the current page request ends.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page maintains its view state; otherwise, false. The default is true.
        /// </returns>
        [Browsable(false)]
        public override bool EnableViewState { get; set; }

        /// <summary>
        /// Gets or sets the encryption mode of the view state.
        /// </summary>
        /// 
        /// <returns>
        /// One of the <see cref="T:System.Web.UI.ViewStateEncryptionMode"/> values. The default value is <see cref="F:System.Web.UI.ViewStateEncryptionMode.Auto"/>.
        /// </returns>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value set is not a member of the <see cref="T:System.Web.UI.ViewStateEncryptionMode"/> enumeration.</exception><exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.UI.Page.ViewStateEncryptionMode"/> property can be set only in or before the page PreRenderphase in the page life cycle.</exception>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        [DefaultValue(ViewStateEncryptionMode.Auto)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public ViewStateEncryptionMode ViewStateEncryptionMode { get; set; }

        /// <summary>
        /// Assigns an identifier to an individual user in the view-state variable associated with the current page.
        /// </summary>
        /// 
        /// <returns>
        /// The identifier for the individual user.
        /// </returns>
        /// <exception cref="T:System.Web.HttpException">The <see cref="P:System.Web.UI.Page.ViewStateUserKey"/> property was accessed too late during page processing. </exception>
        [Browsable(false)]
        public string ViewStateUserKey { get; set; }

        /// <summary>
        /// Gets or sets an identifier for a particular instance of the <see cref="T:System.Web.UI.Page"/> class.
        /// </summary>
        /// 
        /// <returns>
        /// The identifier for the instance of the <see cref="T:System.Web.UI.Page"/> class. The default value is '_Page'.
        /// </returns>
        [Browsable(false)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override string ID { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the <see cref="T:System.Web.UI.Page"/> object is rendered.
        /// </summary>
        /// 
        /// <returns>
        /// true if the <see cref="T:System.Web.UI.Page"/> is to be rendered; otherwise, false. The default is true.
        /// </returns>
        [Browsable(false)]
        public override bool Visible { [TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]
        get; set; }

        /// <summary>
        /// Gets a value that indicates whether the control in the page that performs postbacks has been registered.
        /// </summary>
        /// 
        /// <returns>
        /// true if the control has been registered; otherwise, false.
        /// </returns>
        public bool IsPostBackEventControlRegistered { get; }

        /// <summary>
        /// Gets a value indicating whether page validation succeeded.
        /// </summary>
        /// 
        /// <returns>
        /// true if page validation succeeded; otherwise, false.
        /// </returns>
        /// <exception cref="T:System.Web.HttpException">The <see cref="P:System.Web.UI.Page.IsValid"/> property is called before validation has occurred.</exception>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsValid { get; }

        /// <summary>
        /// Gets a collection of all validation controls contained on the requested page.
        /// </summary>
        /// 
        /// <returns>
        /// The collection of validation controls.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public ValidatorCollection Validators { get; }

        /// <summary>
        /// Gets the page that transferred control to the current page.
        /// </summary>
        /// 
        /// <returns>
        /// The <see cref="T:System.Web.UI.Page"/> representing the page that transferred control to the current page.
        /// </returns>
        /// <exception cref="T:System.InvalidOperationException">The current user is not allowed to access the previous page.-or-ASP.NET routing is in use and the previous page's URL is a routed URL. When ASP.NET checks access permissions, it assumes that the URL is an actual path to a file. Because this is not the case with a routed URL, the check fails.</exception>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Page PreviousPage { get; }

        /// <summary>
        /// Sets an array of files that the current <see cref="T:System.Web.HttpResponse"/> object is dependent upon.
        /// </summary>
        /// 
        /// <returns>
        /// The array of files that the current <see cref="T:System.Web.HttpResponse"/> object is dependent upon.
        /// </returns>
        [Obsolete("The recommended alternative is HttpResponse.AddFileDependencies. http://go.microsoft.com/fwlink/?linkid=14202")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected ArrayList FileDependencies { set; }

        /// <summary>
        /// Sets a value indicating whether the page output is buffered.
        /// </summary>
        /// 
        /// <returns>
        /// true if page output is buffered; otherwise, false. The default is true.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public bool Buffer { get; set; }

        /// <summary>
        /// Sets the HTTP MIME type for the <see cref="T:System.Web.HttpResponse"/> object associated with the page.
        /// </summary>
        /// 
        /// <returns>
        /// The HTTP MIME type associated with the current page.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public string ContentType { get; set; }

        /// <summary>
        /// Sets the code page identifier for the current <see cref="T:System.Web.UI.Page"/>.
        /// </summary>
        /// 
        /// <returns>
        /// An integer that represents the code page identifier for the current <see cref="T:System.Web.UI.Page"/>.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int CodePage { get; set; }

        /// <summary>
        /// Sets the encoding language for the current <see cref="T:System.Web.HttpResponse"/> object.
        /// </summary>
        /// 
        /// <returns>
        /// A string that contains the encoding language for the current <see cref="T:System.Web.HttpResponse"/>.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public string ResponseEncoding { get; set; }

        /// <summary>
        /// Sets the culture ID for the <see cref="T:System.Threading.Thread"/> object associated with the page.
        /// </summary>
        /// 
        /// <returns>
        /// A valid culture ID.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public string Culture { get; set; }

        /// <summary>
        /// Sets the locale identifier for the <see cref="T:System.Threading.Thread"/> object associated with the page.
        /// </summary>
        /// 
        /// <returns>
        /// The locale identifier to pass to the <see cref="T:System.Threading.Thread"/>.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Browsable(false)]
        public int LCID { get; set; }

        /// <summary>
        /// Sets the user interface (UI) ID for the <see cref="T:System.Threading.Thread"/> object associated with the page.
        /// </summary>
        /// 
        /// <returns>
        /// The UI ID.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Browsable(false)]
        public string UICulture { get; set; }

        /// <summary>
        /// Gets or sets a value indicating the time-out interval used when processing asynchronous tasks.
        /// </summary>
        /// 
        /// <returns>
        /// A <see cref="T:System.TimeSpan"/> that contains the allowed time interval for completion of the asynchronous task. The default time interval is 45 seconds.
        /// </returns>
        /// <exception cref="T:System.ArgumentException">The property was set to a negative value.</exception>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public TimeSpan AsyncTimeout { get; set; }

        /// <summary>
        /// Sets the level of transaction support for the page.
        /// </summary>
        /// 
        /// <returns>
        /// An integer that represents one of the <see cref="T:System.EnterpriseServices.TransactionOption"/> enumeration members.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected int TransactionMode { get; set; }

        /// <summary>
        /// Sets a value indicating whether the page can be executed on a single-threaded apartment (STA) thread.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page supports Active Server Pages (ASP) code; otherwise, false. The default is false.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected bool AspCompatMode { get; set; }

        /// <summary>
        /// Sets a value indicating whether the page is processed synchronously or asynchronously.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page is processed asynchronously; otherwise, false.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected bool AsyncMode { get; set; }

        /// <summary>
        /// Sets a value indicating whether tracing is enabled for the <see cref="T:System.Web.UI.Page"/> object.
        /// </summary>
        /// 
        /// <returns>
        /// true if tracing is enabled for the page; otherwise, false. The default is false.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool TraceEnabled { get; set; }

        /// <summary>
        /// Sets the mode in which trace statements are displayed on the page.
        /// </summary>
        /// 
        /// <returns>
        /// One of the <see cref="T:System.Web.TraceMode"/> enumeration members.
        /// </returns>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public TraceMode TraceModeValue { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether ASP.NET should check message authentication codes (MAC) in the page's view state when the page is posted back from the client.
        /// </summary>
        /// 
        /// <returns>
        /// true if the view state should be MAC checked and encoded; otherwise, false. The default is false.
        /// </returns>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Browsable(false)]
        public bool EnableViewStateMac { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether smart navigation is enabled. This property is deprecated.
        /// </summary>
        /// 
        /// <returns>
        /// true if smart navigation is enabled; otherwise, false.
        /// </returns>
        [Obsolete("The recommended alternative is Page.SetFocus and Page.MaintainScrollPositionOnPostBack. http://go.microsoft.com/fwlink/?linkid=14202")]
        [Browsable(false)]
        [Filterable(false)]
        public bool SmartNavigation { get; set; }

        /// <summary>
        /// Gets a value indicating whether the page is processed asynchronously.
        /// </summary>
        /// 
        /// <returns>
        /// true if the page is in asynchronous mode; otherwise, false;
        /// </returns>
        public bool IsAsync { get; }

        /// <summary>
        /// Gets the HTML form for the page.
        /// </summary>
        /// 
        /// <returns>
        /// The <see cref="T:System.Web.UI.HtmlControls.HtmlForm"/> object associated with the page.
        /// </returns>
        public HtmlForm Form { get; }

        /// <summary>
        /// Gets the adapter that renders the page for the specific requesting browser.
        /// </summary>
        /// 
        /// <returns>
        /// The <see cref="T:System.Web.UI.Adapters.PageAdapter"/> that renders the page.
        /// </returns>
        public PageAdapter PageAdapter { get; }

        /// <summary>
        /// Gets a list of objects stored in the page context.
        /// </summary>
        /// 
        /// <returns>
        /// A reference to an <see cref="T:System.Collections.IDictionary"/> containing objects stored in the page context.
        /// </returns>
        [Browsable(false)]
        public IDictionary Items { get; }

        /// <summary>
        /// Occurs at the end of the load stage of the page's life cycle.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public event EventHandler LoadComplete;

        /// <summary>
        /// Occurs at the beginning of page initialization.
        /// </summary>
        public event EventHandler PreInit;

        /// <summary>
        /// Occurs before the page <see cref="E:System.Web.UI.Control.Load"/> event.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public event EventHandler PreLoad;

        /// <summary>
        /// Occurs before the page content is rendered.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public event EventHandler PreRenderComplete;

        /// <summary>
        /// Occurs when page initialization is complete.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public event EventHandler InitComplete;

        /// <summary>
        /// Occurs after the page has completed saving all view state and control state information for the page and controls on the page.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public event EventHandler SaveStateComplete;
    }
}
